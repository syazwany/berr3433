
    // Login for user
    /**
     * @swagger
     * /login:
    post:
      summary: User Login
      description: Endpoint for user authentication and login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user
                password:
                  type: string
                  description: The password of the user
              required:
                - username
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              example:
                message: Login successful
                token: "your_generated_jwt_token"
        '401':
          description: Invalid credentials
          content:
            application/json:
              example:
                message: Invalid password
        '404':
          description: User not found
          content:
            application/json:
              example:
                message: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: An error occurred
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
     */


         // Logout for user (requires a valid JWT)
    /**
     * @swagger
     * /logout:
    post:
      summary: Logout endpoint
      description: Endpoint to perform user logout
      tags:
        - Authentication
      parameters:
        - name: Authorization
          in: header
          description: Bearer token for user authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              example:
                message: Logout successful
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: An error occurred
security:
  - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
     */


// Create a new visitor (requires a valid JWT)
/**
 * @swagger
 *  /visitors:
    post:
      summary: Create a new visitor
      description: Endpoint to create a new visitor
      tags:
        - Visitors
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the visitor
                email:
                  type: string
                  format: email
                  description: The email address of the visitor
                purpose:
                  type: string
                  description: The purpose of the visit
              required:
                - name
                - email
                - purpose
      responses:
        '201':
          description: Visitor created successfully
          content:
            application/json:
              example:
                message: Visitor created successfully
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: An error occurred
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
 */

 
// Register a new user
/**
 * @swagger
 * /register:
    post:
      summary: Register a new user
      description: Endpoint to register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user
                password:
                  type: string
                  description: The password of the user
                email:
                  type: string
                  format: email
                  description: The email address of the user
                address:
                  type: string
                  description: The address of the user
              required:
                - username
                - password
                - email
                - address
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              example:
                message: User registered successfully
        '409':
          description: User already exists
          content:
            application/json:
              example:
                message: User already exists
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: An error occurred
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
 */

 // Register a new security
/**
 * @swagger
 * /register-security:
    post:
      summary: Register a new security personnel
      description: Endpoint to register a new security personnel
      tags:
        - Security
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the security personnel
                username:
                  type: string
                  description: The username of the security personnel
                password:
                  type: string
                  description: The password of the security personnel
                email:
                  type: string
                  format: email
                  description: The email address of the security personnel
              required:
                - name
                - username
                - password
                - email
      responses:
        '201':
          description: Security personnel registered successfully
          content:
            application/json:
              example:
                message: Security personnel registered successfully
        '409':
          description: Security personnel already exists
          content:
            application/json:
              example:
                message: Security personnel already exists
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: An error occurred
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
 */
     
  // View access info for a visitor
    /**
     * @swagger
     *  '/visitors/{name}/{email}/access':
    get:
      summary: Retrieve access information for a visitor
      description: Endpoint to retrieve access information for a visitor based on name and email
      tags:
        - Visitors
      parameters:
        - name: name
          in: path
          description: The name of the visitor
          required: true
          schema:
            type: string
        - name: email
          in: path
          description: The email address of the visitor
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Access information retrieved successfully
          content:
            application/json:
              example:
                name: "Visitor Name"
                email: "visitor@example.com"
                accessInfo: "Access details"
        '404':
          description: Access information not found
          content:
            application/json:
              example:
                message: Access information not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: An error occurred
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
         */

         
 
        // Retrieve all visitors
        /**
         * @swagger
         * /visitors:
    get:
      summary: Retrieve all visitors
      description: Endpoint to retrieve all visitors from the "visitors" collection
      tags:
        - Visitors
      responses:
        '200':
          description: Visitors retrieved successfully
          content:
            application/json:
              example:
                - name: "Visitor1"
                  email: "visitor1@example.com"
                  purpose: "Meeting"
                - name: "Visitor2"
                  email: "visitor2@example.com"
                  purpose: "Delivery"
                # ... more visitor entries
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: An error occurred
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
         */


         
/**
 * @swagger
 * /visitors/{id}:
 *   patch:
 *     summary: Update a visitor by ID
 *     description: Endpoint to update a visitor's information by ID
 *     tags:
 *       - Visitors
 *     parameters:
 *       - name: id
 *         in: path
 *         description: The ID of the visitor to update
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 description: The updated name of the visitor
 *               email:
 *                 type: string
 *                 format: email
 *                 description: The updated email address of the visitor
 *               purpose:
 *                 type: string
 *                 description: The updated purpose of the visit
 *             required:
 *               - name
 *               - email
 *               - purpose
 *     responses:
 *       '200':
 *         description: Visitor updated successfully
 *         content:
 *           application/json:
 *             example:
 *               message: Visitor updated successfully
 *       '500':
 *         description: Internal server error
 *         content:
 *           application/json:
 *             example:
 *               message: An error occurred
 */
/**
 * @swagger
 * components:
 *   securitySchemes:
 *     BearerAuth:
 *       type: apiKey
 *       in: header
 *       name: Authorization
 */

   // Delete a visitor (requires a valid JWT)
  /**
   * @swagger
   * '/visitors/{id}':
    delete:
      summary: Delete a visitor by ID
      description: Endpoint to delete a visitor by ID
      tags:
        - Visitors
      parameters:
        - name: id
          in: path
          description: The ID of the visitor to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Visitor deleted successfully
          content:
            application/json:
              example:
                message: Visitor deleted successfully
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: An error occurred
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
   */
     
